type Contact {
  email: String
  newMsgs: Boolean
  status: String
  userName: String
  _id: String
}

type Participant {
  joinDate: String
  userName: String
  _id: String
}

type Conversation {
  newMsgs: Boolean
  participants: [Participant]
  roomId: String
  roomName: String
}

type User{
  _id: ID
  userName: String
  email: String
  contacts: [Contact]
  hasAvatar: Boolean
  conversations: [Conversation]
  language: String
}

type LoginReturn {
  user: User
  token: String
}

type Query {
  "Returns a user"
    getUser(email:String, token:String, selfUser:Boolean): User
  }

input Credentials {
  email: String!,
  password: String!
}
type Mutation{
    "Login"
    login(input: Credentials!): LoginReturn
 }

type Mutation{
  "Logout"
  logout(token:String): String
}

input ParamsLang{
  email:String, 
  language:String
}
type Mutation{
  "Change the language of the ui in the chat"
  changeLanguage(token:String, paramsLang:ParamsLang): String
}

type Mutation{
  "Confirm that a user has accepted a contact request"
  confirmAdding(token:String, participants:[String]):String
}